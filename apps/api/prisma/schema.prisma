generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String     @db.VarChar(100)
  email         String     @unique @db.VarChar(100)
  phone         String?    @db.VarChar(15)
  password      String     @db.Text
  profile_photo String?    @db.Text
  referral_code String     @db.VarChar(8)
  point         Decimal    @default(0) @db.Decimal(15, 2)
  is_verified   IsVerified @default(YES)
  role          Role       @default(CUSTOMER)
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @updatedAt

  transactions  Transaction[]
  reviews       Review[]
  referral_logs ReferralLog[] @relation("ReferralLogToUser")
  referrer_logs ReferralLog[] @relation("ReferralLogToReferrer")
  coupon_users  CouponUser[]

  @@map("users")
}

model Event {
  id                Int         @id @default(autoincrement())
  event_category_id Int
  city_id           Int
  slug              String      @unique
  name              String      @db.VarChar(100)
  host_name         String      @db.VarChar(100)
  address           String      @db.Text
  description       String?     @db.Text
  term_condition    String?     @db.Text
  date              DateTime    @db.Date
  start_time        DateTime    @db.Time()
  end_time          DateTime    @db.Time()
  status            EventStatus
  image             String      @db.Text
  created_at        DateTime    @default(now())
  updated_at        DateTime?   @updatedAt
  isDeleted         DateTime?

  event_category EventCategory  @relation(fields: [event_category_id], references: [id])
  city           City           @relation(fields: [city_id], references: [id])
  ticket_types   TicketType[]
  transactions   Transaction[]
  reviews        Review[]
  voucher_events VoucherEvent[]

  @@map("events")
}

model EventCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(100)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  events Event[]

  @@map("event_categories")
}

model City {
  id         Int       @id @default(autoincrement())
  name       String    @unique @db.VarChar(45)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  events Event[]

  @@map("cities")
}

model TicketType {
  id                      Int       @id @default(autoincrement())
  event_id                Int
  name                    String    @db.VarChar(100)
  price                   Decimal   @db.Decimal(15, 2)
  quota                   Int?
  purchaseable_limit_time DateTime  @db.Timestamp
  created_at              DateTime  @default(now())
  updated_at              DateTime? @updatedAt

  event               Event               @relation(fields: [event_id], references: [id])
  transaction_tickets TransactionTicket[]

  @@map("ticket_types")
}

model Review {
  id           Int      @id @default(autoincrement())
  rating_score Int
  event_id     Int
  user_id      Int
  description  String?  @db.Text
  created_at   DateTime @default(now())

  event Event @relation(fields: [event_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@map("reviews")
}

model ReferralLog {
  id          Int      @id @default(autoincrement()) @db.Integer
  user_id     Int
  referrer_id Int
  created_at  DateTime @default(now()) @db.Timestamp

  user     User @relation("ReferralLogToUser", fields: [user_id], references: [id])
  referrer User @relation("ReferralLogToReferrer", fields: [referrer_id], references: [id])

  @@map("referral_logs")
}

model Transaction {
  id                 Int           @id @default(autoincrement())
  event_id           Int
  user_id            Int
  voucher_event_id   Int?
  coupon_user_id     Int?
  payment_method_id  Int
  transaction_number String        @db.VarChar(100)
  total_price        Decimal       @db.Decimal(15, 2)
  point_used         Int?
  payment_proof      String?       @db.Text
  payment_date       DateTime?
  payment_status     PaymentStatus
  created_at         DateTime      @default(now())
  updated_at         DateTime?     @updatedAt

  event               Event               @relation(fields: [event_id], references: [id])
  user                User                @relation(fields: [user_id], references: [id])
  voucher_event       VoucherEvent?       @relation(fields: [voucher_event_id], references: [id])
  coupon_user         CouponUser?         @relation(fields: [coupon_user_id], references: [id])
  payment_method      PaymentMethod       @relation(fields: [payment_method_id], references: [id])
  transaction_tickets TransactionTicket[]

  @@map("transactions")
}

model TransactionTicket {
  id             Int       @id @default(autoincrement())
  transaction_id Int
  ticket_type_id Int
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  transaction Transaction @relation(fields: [transaction_id], references: [id])
  ticket_type TicketType  @relation(fields: [ticket_type_id], references: [id])

  @@map("transaction_tickets")
}

model CompanyInformation {
  id           Int    @id @default(autoincrement())
  about_us     String @db.Text
  address      String @db.Text
  email        String @db.VarChar(100)
  phone        String @db.VarChar(15)
  social_media Json

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("company_information")
}

model Faq {
  id         Int       @id @default(autoincrement())
  question   String    @db.Text
  answer     String    @db.Text
  is_active  IsActive  @default(ACTIVE)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  @@map("faqs")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  name       String?  @db.VarChar(100)
  price      Decimal? @db.Decimal(15, 2)
  created_at DateTime @default(now())

  coupon_users CouponUser[]

  @@map("coupons")
}

model CouponUser {
  id           Int           @id @default(autoincrement())
  user_id      Int
  coupon_id    Int
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  transactions Transaction[]

  coupon Coupon @relation(fields: [coupon_id], references: [id])
  user   User   @relation(fields: [user_id], references: [id])

  @@map("coupons_users")
}

model Voucher {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  price      Decimal   @db.Decimal(15, 2)
  start_date DateTime
  end_date   DateTime
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  voucher_events VoucherEvent[]

  @@map("vouchers")
}

model VoucherEvent {
  id         Int      @id @default(autoincrement())
  event_id   Int
  voucher_id Int
  created_at DateTime @default(now())

  voucher      Voucher       @relation(fields: [voucher_id], references: [id])
  event        Event         @relation(fields: [event_id], references: [id])
  transactions Transaction[]

  @@map("vouchers_events")
}

model PaymentMethod {
  id             Int    @id @default(autoincrement())
  account_name   String @db.VarChar(45)
  account_number String @db.VarChar(45)
  logo           String @db.Text

  transactions Transaction[]

  @@map("payment_methods")
}

enum IsActive {
  ACTIVE
  INACTIVE
}

enum PaymentStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum IsVerified {
  YES
  NO
}

enum Role {
  CUSTOMER
  EVENT_ORGANIZER
}

enum EventStatus {
  ACTIVE
  INACTIVE
}
